@model ProudSourceBeta.Models.ProjectIndexViewModel

@{
    ViewBag.Title = "Project Details";
}

<link href="~/Content/Shared/Shared.css" rel="stylesheet" type="text/css" />

@* Project Details *@
<div class="container">

    <h2><b>Details</b></h2>

    <div class="data-container padding-15 bordered-grey" style="font-size: 18px;">
        <dl class="dl-horizontal">

            <dt class="profile-header">
                Name
            </dt>

            <dd class="profile-words">
                @Html.DisplayFor(model => model.Name)
            </dd>

            <br />

            <dt class="profile-header">
                Description
            </dt>

            <dd class="profile-words">
                @Html.DisplayFor(model => model.Description)
            </dd>

            <br />

            <dt class="profile-header">
                Investment Goal
            </dt>

            <dd id="investment-goal">
                @Html.DisplayFor(model => model.Investment_Goal)
            </dd>

            <br />

            <dt class="profile-header">
                @Html.DisplayNameFor(model => model.Profile_Public)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Profile_Public)
            </dd>

        </dl>

        <button class="flat-button flat-button-small green" onclick="location.href='@Url.Action("Edit", new { id = Model.Project_ID })'">
            Edit
        </button>
    </div>

</div>

@* Project Investments *@
<div class="container">

    <h2><b>Investments</b></h2>

    <div class="bordered-grey padding-15">

        @if (Model.PROC_Agrements.Count > 0)
        {

        <table class="table-hover table-responsive" style="">

            <thead>
                <tr>

                    <th class="col-sm-4">Investor Name</th>

                    <th class="col-sm-4">Date Created</th>

                    <th class="col-sm-4">PROC Begin Date</th>

                    <th class="col-sm-4">PROC End Date</th>

                    <th class="col-sm-4">Revenue Percentage</th>

                </tr>

            </thead>

            @foreach (System.Data.DataRow item in Model.PROC_Agrements)
            {
                <tr>

                    <td class="col-sm-4">
                        <a href="@string.Format("/PROC/Details/{0}", item["Proc_ID"])">@item["Name"].ToString()</a>
                    </td>

                    <td class="col-sm-4">@item["Created_Date"].ToString()</td>

                    <td class="col-sm-4">@item["Performance_BeginDate"].ToString()</td>

                    <td class="col-sm-4">@item["Performance_EndDate"].ToString()</td>

                    <td class="col-sm-4">@item["Revenue_Percentage"].ToString()</td>

                </tr>
            }

        </table>

        }

        @if(Model.PROC_Agrements.Count < 1)
        {
            <p class="template-words">You have no PROC agrements tied to this project.</p>
        }

    </div>

</div>

@* Project Images *@
<div class="container">
    <h2><b>Project Images</b></h2>

    <div class="bordered-grey padding-15">

        @* Space Below Button *@
        <div style="height: 10px;">

        </div>

        @if (Model.Profile_Images_IDs.Count() > 0)
        {
            {
                int rows = Model.Profile_Images_IDs.Count() / 4;
                if ((Model.Profile_Images_IDs.Count() % 4) > 0)
                {
                    rows++;
                }
                int image_index = 0;

                @*So these two for loops will get our images and construct an appropriate number of divs to hold images for this project, whic is done by the first loop and the sencond loop
                    will actually get the images in question and isply them onto our page.*@
        for (int i = 0; i < rows; i++)
        {
            <div class="row">
                @*This loop's stop condition will be determined by a variable that will hold the index position of where the loops have advanced on our image collection.*@
                @for (int k = 0; image_index < Model.Profile_Images.Count(); k++)
                {
                    if ((k % 4) == 0 && k != 0)
                    {
                        break;
                    }
                    { // This block of code here will convert the byte array into a base64 string that will be converted by the client's browser into an image to be viwed by the user.
                      // It also gets the id of the image in question making it easier to sport a removal button.
                        string base64 = Convert.ToBase64String(Model.Profile_Images.ElementAt(image_index));
                        string imgSrc = string.Format("data:image/gif;base64,{0}", base64);
                        int image_id = Model.Profile_Images_IDs.ElementAt(image_index);
                        <div class="col-lg-3">
                            <img class="project-image img-thumbnail" src="@imgSrc" />
                            @if (Model.Valid)
                            {
                                //<a href="@string.Format("/Project/RemoveImage/{0}", image_id)">Remove</a>
                            }
                        </div>
                    }
                    image_index++;
                }
            </div>
                }
            }
        }
        @if (Model.Profile_Images_IDs.Count() < 1)
        {
            if (Model.Valid)
            {
                <p class="template-words">No images where found related to this account perhaps you should add some</p>
            }
            else
            {
                <p class="template-words"> No images were found related to this account.</p>
            }
        }

        @if (Model.Valid)
        {
            <br />
            <button class="flat-button flat-button-small green" onclick="location.href='@string.Format("/Project/UploadImage/{0}", Model.Project_ID)'">
                Add Image
            </button>
        }
    </div>
</div>

@* Project Documents *@
<div class="container">
    <h2><b>Project Documents</b></h2>

    <div class="bordered-grey padding-15">

        @if (Model.Document_IDs.Count() > 0)
        {
            {// We need to instantiate two loops that will set how many row divs we will need and one that will place 6 fioe links with file glyphs from bootstrap
                int rows = Model.Profile_Images_IDs.Count() / 6;
                if ((Model.Profile_Images_IDs.Count() % 6) > 0)
                {
                    rows++;
                }
                int document_index = 0;
                for (int i = 0; i < rows; i++)
                {
                    <div class="row">
                        @for (int k = 0; document_index < Model.Document_IDs.Count(); k++)
                        {
                            if ((k % 6) == 0 && k != 0)
                            {
                                break;
                            }
                            <div class="col-lg-2">
                                <span class="glyphicon glyphicon-file"></span>
                                <a href="@string.Format("/Document/Download/{0}", Model.Document_IDs.ElementAt(document_index))">@Model.Document_FileNames.ElementAt(document_index)</a>
                                @if (Model.Valid)
                            {
                                    <a href="@string.Format("/Project/RemoveDocument/{0}", Model.Document_IDs.ElementAt(document_index))">Remove File</a>
                                }
                            </div>
                            document_index++;
                        }
                    </div>
                }
            }
        }
        @if (Model.Document_IDs.Count() < 1)
        {
            if (Model.Valid)
            {
                <p class="template-header">No documents where found related to this account, perhaps you would like to add some.</p>
            }
            else
            {
                <p class="template-header">No documents were found related to this account.</p>
            }
        }

        <br />

        @if (Model.Valid)
        {
            <button class="flat-button flat-button-small green" onclick="location.href='@string.Format("/Project/UploadDocument/{0}", Model.Project_ID)'">
                Add Document
            </button>
        }
    </div>
</div>

@* Financial Account details *@
<hr />

<div class="container">
    <h2><b>Financial Account </b></h2>

    <button class="flat-button flat-button-small green" onclick="location.href='@string.Format("/FinancialAccount/Index/{0}", Model.Financial_Account_ID)'">
        Update
    </button>

</div>

<hr />

@* Links at bottom *@
@if (Model.Valid)
{
    <p>
        @Html.ActionLink("Back to Project account", "Index", new { id = Model.Project_ID })
    </p>
}
@if (Model.IsRegisteredViewer)
{
    <div class="container">

        <p>
            <a href="@string.Format("/Project/CreatePROC/{0}", Model.display_Project_ID)">Create a PROC Agreement</a>
        </p>

    </div>

    <br />
    <div class="container">

        @if (IsPost)
        {
            <h4 class="template-header">Your message has been sent</h4>
        }

        @if (!IsPost)
        {

            <h4 class="template-header">Message the owner of this project</h4>

            <div class="form">
                <form id="message-project-owner" method="post">
                    <div class="col-md-10">

                        <textarea form="message-project-owner" name="Project_Message" class="input-group-lg"></textarea>

                    </div>

                    <div class="col-md-offset-2 col-md-10">

                        <input type="submit" value="message" class="btn btn-default" />

                    </div>
                </form>

            </div>

        }


    </div>

}

